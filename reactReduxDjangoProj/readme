WIKI

  1. . bin/activate (corresponding: deactivate - no bin) (~/Projects/reactReduxDjangoEnv) (or . ../bin/activate under reactReduxDjangoProj)
  2. npm build/watch
     - 'npm run build' build dev main.js, then localhost can run with this main.js
     - 'npm run build:watch' build and watch dev main.js if source file changed, refresh browser to reflect new change
     - 'npm start -s' with node backend running, hot-reloading new change (when switching between 2 and 3, a build is needed)
  3. python manage.py runserver (~/Projects/reactReduxDjangoEnv/reactReduxDjangoProj)

- npm run build-prod: build prod dist/main-[#hash].js (not fully walking thru yet)

- ./node_modules/.bin/webpack --config webpack.config.dev.babel.js

- Hot reloading
  * http://owaislone.org/blog/webpack-plus-reactjs-and-django/
  * webpack-dev-server react-hot-loader two packages for hot-reload
  * in console [HMR]: hot module replacement, [WDS]: webpack-dev-server
  * https://github.com/gaearon/react-transform-hmr (React Hot Loader 3 is the solution, not fully ready yet. Currently babel-preset-react-hmre is the solution: Make sure you process files with babel-loader, and that you don’t use React Hot Loader (it’s not needed with this transform)
  * babel-preset-react-hmre
    1. Experimental,
    2. doesn't reload functional components
    3. doesn't reload container functions like mapStateToProps.
    4. React Hot Loader 3 is in beta, it addresses these downsides. It will be the recommended approach when released.

- babel-polyfill 50k

- babel-register package is for building webpack.config.*.babel.js, webpack.config.dev.hot.js doesn't need this becasue it use babel-node

- react-router-dom: new react-router (> Version 4), new logic order is, index->app->routes
  * https://reacttraining.com/react-router/web/example/sidebar
  * https://reacttraining.com/react-router/web/example/basic
  * https://reacttraining.com/react-router/web/guides/code-splitting
  * https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf
  * https://codeburst.io/react-router-v4-unofficial-migration-guide-5a370b8905a
  * No Match (404) https://reacttraining.com/react-router/web/example/no-match
  * Redirect(Auth) https://reacttraining.com/react-router/web/example/auth-workflow

- redux
  * unidirectional flow - data flow down, action flow up
  * offer a clear and elegant solution for
    # complex data flows
    # inter-component communication
    # non-heirarchical data
    # many actions
    # same data used in multiple places
  * 3 principles
    # one immutable store (state can't be changed)
    # actions trigger changes
    # reducers(pure functions) update state
  * container components marshalling data and actions, which they typically pass down to dumb components via props
  * single store with hierarchical reducers, reducer can be nested via functional composition, just like react componets can be nested
  * state is immutable, Flux state is mutable

- react-redux
  * once the new state is returned from a reducer, the store is updated. React re-renders any components that are utilizing the data - your react components are connected to the store using React-Redux
  * two components
    # Provider - attach app to Store
    # Connect - Creates container components, wraps our component so it's connected to the Redux store
      export default connect(
        mapStateToProps, // What state/reducers (store's data) should I expose to this component as props
        mapDispatchToProps // what actions do I want on props
      )(AuthorPage);
      function mapStateToProps(state, ownProps) {
        return {appState: state.authorReducer}; // this.props.appState in my components, state.authorReducer is partial store (state)
      }
      // every time the component is updated, the mapStateToProps function is called
      // use a library like Reseledt for memoizing (caching for function calls) if doing somthing expensive
      3. function mapDispatchToProps(dispatch) { // use bindActionCretors
           return {
            actions: bindActionCretors(actions, dispatch) // bindActionCretors(actions, dispatch) is part of redux, warps action creators in dispatch call for you
           };
         }
         this.props.actions.loadCourses()
      // there are 3 ways to handle mapping your actions to props in Redux contianer components (mapDispatchToProps)
      1. this.props.dispacth(loadCourses());
         * Ignore it. Use/call dispatch manually. When you omit mapDispatchToProps, the dispatch funciton will be attached to your contianer component
         * loadCourses() is action creator
      2. function mapDispatchToProps(dispatch) { // Manually wrap
          return {
            loadCourses: () => {
              dispatch(loadCourses());
            }
          };
         }
         this.props.loadCourses()

- action creators
  rateCourse(rating) {
    return { type: RATE_COURSE, rating: rating }
  }

- reducer
  function myReducer(state, action) {
    switch (action.type) {
      case 'INCREMENT_COUNTET':
        return (Object.assign(
          {},
          state,
          {counter: state.counter + 1}
        ));
    }
  }
  * all reducers are called on each action dispatch
  * reducer composition: a given action can be handled by more than one reducer, so can update different slice of store
  * write independent small reducer funcitons that are each responsible for updates to a specific slice of state. We call this patter "reducer composition". A given action could be handled by all, some, or none of them.

- store (3 functions: dispatch, subscribe, getState)

- Two Component Types
  * Container                 vs.  Presentational
  - Focus on how things work  vs.  Focus on how things look
  - Aware of Redux            vs.  Unaware of Redux
  - Subscribe to Redux State  vs.  Read data from props
  - Dispatch Redux actions    vs.  Invoke callbacks on props
  - Generated by react-redux  vs.  Written by hand

- React (click button) -> Action(dispatch->actionCreator) -> Reducer (make a new copy of the state and return it) -> Store (make sure all connected components aware) -> React-Redux (mapStateToProps(): intelligently determine if telling React about this change) -> React (render(): new data passed down via props, will update UI)

- ES6
  * Object.assign(target, ...sources)
  * spread operator ([...state, Object.assign({}, action.course)])
  * course (=> course: course)

- ES5

- Immutable.js

- package.json: "test": "mocha --reporter progress tools/testSetup.js \"assets/src/**/*.test.js\"",

- django/python
  * http://localhost:8000/admin/
  * react csrftoken config via axios: https://gist.github.com/Yogendra0Sharma/5aa96ebfd0854623a5451c53672088d5

TODO
-
- convert table to div in courselist.js
- post failed when in <form> in LoginForm.js
- redirect when not loggin (dynamic routes??)
- seperate css
- package.json: packages' clarification in dependencies or devDependencies?
- upgrade to React Hot Loader 3
- Django production deployment setup
- modal dialog
- data grid
- pivot table
- should node_modules in git?
- should Django Env in git?
- should reactReduxDjangoProj/webpack-stats.json in git?
- replace toastr/jquery
- move rest api call to individual page
- understand refs in react
